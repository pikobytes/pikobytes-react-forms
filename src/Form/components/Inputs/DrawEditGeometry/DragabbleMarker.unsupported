/**
 * Created by nicolas.looschen@pikobytes.de on 3/26/21.
 *
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */
import React, { useEffect, useRef, useState } from 'react';
import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';
import { CSSProperties } from '@material-ui/styles';
import maplibre from 'maplibre-gl';
import { Marker } from 'mapbox-gl';
import { Tooltip } from '@material-ui/core';
import { useRecoilValue } from 'recoil';

import MarkerIcon from '../../../../_images/marker-icon-documents.png';
import MarkerShadowIcon from '../../../../_images/marker-shadow.png';

import { translationFunctionState } from '../../../../structs/atoms';
import { translate } from '../../../../util/translation';
import { DRAW_EDIT_GEOMETRY_NAMESPACE } from './typedef/types';

export const MARKER_STYLES: Record<string, CSSProperties> = {
  marker: {
    cursor: 'pointer',
  },
  markerShadowIcon: {
    position: 'absolute',
    marginLeft: -15,
    marginTop: -52,
    height: 60,
    width: 40,
    zIndex: 0,
  },
  markerDefaultIcon: {
    position: 'absolute',
    marginLeft: -15,
    marginTop: -50,
    height: 60,
    width: 30,
    zIndex: 1,
  },
};

const useStyles = makeStyles((theme: Theme) =>
  createStyles(
    Object.assign({}, MARKER_STYLES, {
      tooltip: {
        fontSize: theme.typography.pxToRem(14),
      },
    })
  )
);

interface IDraggableMarkerProps {
  coordinates: [number, number];
  isDraggable?: boolean;
  isInitialPlacement?: boolean;
  onDragStart?: (marker: Marker) => void;
  onDrag?: (marker: Marker) => void;
  onDragEnd?: (marker: Marker) => void;
  map: maplibre.Map;
}

export default function DraggableMarker(props: IDraggableMarkerProps) {
  const {
    coordinates,
    isDraggable = false,
    isInitialPlacement = false,
    onDrag,
    onDragEnd,
    onDragStart,
    map,
  } = props;

  const markerRef = useRef(null);
  const [isDragging, setIsDragging] = useState(false);
  const [marker, setMarker] = useState<maplibre.Marker | undefined>(undefined);
  const t = useRecoilValue(translationFunctionState);

  // load global marker styles
  const classes = useStyles();

  useEffect(() => {
    if (markerRef.current !== null && !isDragging) {
      // Create the marker
      const el = (markerRef.current as unknown) as HTMLDivElement;

      // Create new maplibre marker
      const marker = new maplibre.Marker({
        element: el,
        draggable: isDraggable,
      })
        .setLngLat(coordinates)
        .addTo(map);

      if (isDraggable) {
        if (onDragEnd !== undefined) {
          marker.once('dragend', (e: any) => {
            onDragEnd(e);
            setIsDragging(false);
          });
        }
        if (onDrag !== undefined) {
          marker.on('drag', onDrag);
        }

        if (onDragStart !== undefined) {
          marker.once('dragstart', (e: any) => {
            onDragStart(e);
            setIsDragging(true);
          });
        }
      }

      setMarker(marker);

      return () => {
        marker.off('drag', onDrag);
        marker.remove();
      };
    }
  }, []);

  useEffect(() => {
    if (!isDragging && marker !== undefined) {
      marker.setLngLat(coordinates);
    }
  }, [coordinates, isDragging]);

  return (
    <div ref={markerRef}>
      <Tooltip
        arrow
        classes={{ tooltip: classes.tooltip }}
        title={translate(
          t,
          `${DRAW_EDIT_GEOMETRY_NAMESPACE}.markerTooltip`,
          'Please click on the map to place the marker.'
        )}
        open={isInitialPlacement}
        placement="right"
      >
        <div className={classes.marker}>
          <img src={MarkerShadowIcon} className={classes.markerShadowIcon} />
          <img src={MarkerIcon} className={classes.markerDefaultIcon} />
        </div>
      </Tooltip>
    </div>
  );
}
