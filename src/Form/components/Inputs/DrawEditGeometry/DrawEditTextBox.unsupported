/**
 * Created by nicolas.looschen@pikobytes.de on 3/29/21.
 *
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */

import React, { ChangeEvent, useEffect, useState } from 'react';
// @ts-ignore
import MapboxDraw from '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw';
//@ts-ignore
import geojsonhint from '@mapbox/geojsonhint';
import { UseFormReturn } from 'react-hook-form';
import { InputProps as StandardInputProps } from '@material-ui/core/Input/Input';
import { createStyles, Grid, TextField, Theme } from '@material-ui/core';
import { makeStyles } from '@material-ui/styles';
import { useThrottleCallback } from '@react-hook/throttle';
import { useRecoilValue } from 'recoil';

import { IGeometry } from './typedef/types';
import { handleUpdateGeometry } from './util';
import { translationFunctionState } from '../../../../structs/atoms';
import { generateTranslate } from '../../../../util/translation';

const useStyles = makeStyles((theme: Theme) => createStyles({}));

interface DrawEditGeometryProps {
  error?: { message: string; type: string };
  name: string;
  onChange: (value: string) => void;
  onResetError: UseFormReturn['clearErrors'];
  onSetError: UseFormReturn['setError'];
  geometry: IGeometry;
  required?: boolean;
  variant?: 'filled' | 'outlined' | 'standard';
}

export default function DrawEditTextBox(props: DrawEditGeometryProps) {
  const {
    error,
    geometry,
    name,
    onChange,
    onResetError,
    onSetError,
    required,
    variant,
  } = props;

  // state section
  const classes = useStyles();
  // internal (-> state of the input fields) point
  const [internalGeometry, setInternalGeometry] = useState('');
  // is the user typing in the input fields? -> try to display internal
  // point representation
  const [isTyping, setIsTyping] = useState(false);
  const t = useRecoilValue(translationFunctionState);
  const DRAW_EDIT_TEXT_BOX_NAMESPACE = 'application:component.DrawEditTextBox';
  const translate = generateTranslate(t);

  const label = translate(
    `${DRAW_EDIT_TEXT_BOX_NAMESPACE}.label`,
    'coordinates'
  );

  const isErroneous = error !== undefined;

  // handlers
  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {
    setInternalGeometry(event.target.value);
  };

  const handleBlur: StandardInputProps['onBlur'] = (event) => {
    const newGeometry = JSON.parse(event.target.value);

    const newFeature = {
      type: 'Feature',
      properties: {},
      id: 'geometry',
      geometry: newGeometry,
    };

    const geometryHints = geojsonhint.hint(newFeature);

    if (geometryHints.length === 0) {
      handleUpdateGeometry(newFeature, onChange);
    } else {
      onSetError(name, { type: 'manual', message: geometryHints[0].message });
    }

    setIsTyping(false);
  };

  const handleFocus = () => {
    setIsTyping(true);
  };

  const handleUpdateExternalGeometry = useThrottleCallback(() => {
    if (!isTyping) {
      setInternalGeometry(JSON.stringify(geometry));

      if (error !== undefined) {
        onResetError(name);
      }
    }
  });

  useEffect(handleUpdateExternalGeometry, [geometry]);

  return (
    <Grid alignItems="flex-end" container spacing={2}>
      <Grid item xs={12}>
        <TextField
          error={isErroneous}
          fullWidth
          InputLabelProps={{ shrink: true }}
          label={label}
          multiline
          onBlur={handleBlur}
          onChange={handleChange}
          onFocus={handleFocus}
          required={required}
          rows={3}
          type="textfield"
          value={internalGeometry}
          variant={variant}
        />
      </Grid>
    </Grid>
  );
}
